{"version":3,"sources":["api/index.js","components/CardStyled/CardStyled.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","components/InfoSection/InfoSection.js","App.js","serviceWorker.js","index.js","components/Chart/chart.module.css","components/CountryPicker/countryPicker.module.css","components/CardStyled/cardStyled.module.css","components/InfoSection/infoSection.module.css","App.module.css"],"names":["url","fetchData","country","a","usedUrl","fetch","then","res","json","data","console","log","modifiedData","confirmed","value","deaths","recovered","lastUpdate","fetchDailyGlobal","map","totalConfirmed","deltaConfirmed","reportDate","total","fetchCountries","countries","name","CardStyled","props","cardInfo","Data","Card","className","styles","Title","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","CircularProgress","Chart","useState","dailyGlobalData","setDailyGlobalData","useEffect","fetchDailyGlobalDataToState","barChart","labels","datasets","label","backgroundColor","options","maintainAspectRatio","scales","xAxes","barPercentage","yAxes","ticks","beginAtZero","callback","index","values","toLocaleString","tooltips","callbacks","tooltipItems","legend","display","lineChart","borderColor","fill","datasetIndex","container","chart","CountryPicker","handleCountryChange","setCountries","fetchCountriesToState","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","key","InfoSection","cardInfoInfected","cardInfoDeaths","cardInfoRecovered","infoSection","Grid","spacing","justify","item","xs","md","App","state","fetchedData","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.c5946ad9.chunk.js","sourcesContent":["const url = `https://covid19.mathdro.id/api`;\r\n\r\nexport const fetchData = async (country) => {\r\n    let usedUrl = country ? `${url}/countries/${country}` : url;\r\n\r\n    try {\r\n        const data = await fetch(usedUrl).then(res=>res.json());\r\n        console.log(data);\r\n        const modifiedData = {\r\n            confirmed: data.confirmed.value,\r\n            deaths: data.deaths.value,\r\n            recovered: data.recovered.value,\r\n            lastUpdate: data.lastUpdate\r\n        }\r\n        return modifiedData;        \r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n\r\nexport const fetchDailyGlobal = async () => {\r\n    try {\r\n        const data = await fetch(`${url}/daily`).then(res=>res.json());\r\n        console.log(data);\r\n        const modifiedData = data.map(\r\n            ({totalConfirmed, deltaConfirmed, deaths, reportDate})=>{return {totalConfirmed, deltaConfirmed, deaths: deaths.total, reportDate}}\r\n        )\r\n        return modifiedData\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const data = await fetch(`${url}/countries`).then(res=>res.json());\r\n        const modifiedData = data.countries.map((country)=>{return country.name});\r\n        return modifiedData;\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styles from './cardStyled.module.css';\r\nimport CountUp from 'react-countup';\r\nimport { Card, CardContent, Typography, CircularProgress } from '@material-ui/core';\r\n\r\nexport const CardStyled = (props) => {\r\n\r\n    const data = props.cardInfo.Data;\r\n\r\n    return (\r\n        <Card className={styles[props.cardInfo.Title]}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>{props.cardInfo.Title}</Typography>\r\n                {data ?\r\n                    <div>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={data} duration={2} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(props.cardInfo.lastUpdate).toDateString()}</Typography>\r\n                    </div>\r\n                    :\r\n                    <CircularProgress />\r\n                }\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './chart.module.css';\r\nimport { fetchDailyGlobal } from '../../api';\r\n\r\nexport const Chart = ({data: {data: {confirmed, deaths, recovered}, country}}) => {\r\n    const [dailyGlobalData, setDailyGlobalData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchDailyGlobalDataToState = async () => {\r\n            const dailyGlobalData = await fetchDailyGlobal();\r\n            setDailyGlobalData(dailyGlobalData);\r\n        };\r\n        fetchDailyGlobalDataToState();\r\n    }, [])\r\n    \r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Deaths', 'Recovered'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 0, 0, 0.5)', 'rgba(0, 255, 0, 0.5)'],\r\n                            data: [confirmed, deaths, recovered],\r\n                        }\r\n                    ],\r\n                }}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        xAxes: [{\r\n                            barPercentage: 0.7\r\n                        }],\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: false,\r\n                                callback: function (value, index, values) {\r\n                                    return value.toLocaleString();\r\n                                }\r\n                            }\r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        callbacks: {\r\n                            label: function (tooltipItems, data) {\r\n                                return data.labels[tooltipItems.index] + \": \" + data.datasets[0].data[tooltipItems.index].toLocaleString();\r\n                            }\r\n                        }\r\n                    },\r\n                    legend: { display: false }\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyGlobalData[0] ? (\r\n            <Line\r\n                data={{\r\n                    labels: dailyGlobalData.map(({reportDate}) => reportDate),\r\n                    datasets: [{\r\n                        data: dailyGlobalData.map((data) => data.totalConfirmed),\r\n                        label: 'Infected',\r\n                        borderColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true\r\n                    },\r\n                    { \r\n                        data: dailyGlobalData.map((data)=>data.deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'rgba(0, 0, 0, 0.5)',\r\n                        fill: true\r\n                    },\r\n                    {\r\n                        data: dailyGlobalData.map((data)=>data.deltaConfirmed),\r\n                        label: 'New Cases',\r\n                        borderColor: 'rgba(0, 0, 255, 0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        yAxes:[{\r\n                            ticks: {\r\n                                callback: function(value, index, values) {\r\n                                    return value.toLocaleString();\r\n                                }\r\n                            }\r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        callbacks: {\r\n                            label: function(tooltipItems, data){\r\n                                console.log(data);\r\n                                return data.datasets[tooltipItems.datasetIndex].label + \": \" + data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index].toLocaleString();\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.chart}>\r\n                {country ? barChart : lineChart}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styles from './countryPicker.module.css'\r\nimport { FormControl, NativeSelect } from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\n\r\n\r\nexport const CountryPicker = ({ handleCountryChange }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesToState = async () => {\r\n            setCountries(await fetchCountries());\r\n        };\r\n        fetchCountriesToState();\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <FormControl className={styles.formControl}>\r\n                <NativeSelect defaultValue=\"\" onChange={(event) => handleCountryChange(event.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {countries.map((country, index) => <option key={index} value={country}>{country}</option>)}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styles from './infoSection.module.css';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport { CardStyled } from '../';\r\n\r\nexport const InfoSection = (props) => {\r\n\r\n    const data = props.data;\r\n    const cardInfoInfected = {Title: \"Infected\", Data: data.confirmed, lastUpdate: data.lastUpdate};\r\n    const cardInfoDeaths = {Title: \"Deaths\", Data: data.deaths, lastUpdate: data.lastUpdate};\r\n    const cardInfoRecovered = {Title: \"Recovered\", Data: data.recovered, lastUpdate: data.lastUpdate};\r\n\r\n    return (\r\n        <div className={styles.infoSection}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item xs={10} md={3}>\r\n                    <CardStyled cardInfo={cardInfoInfected}/>\r\n                </Grid>\r\n                <Grid item xs={10} md={3}>\r\n                    <CardStyled cardInfo={cardInfoDeaths}/>\r\n                </Grid>\r\n                <Grid item xs={10} md={3}>\r\n                    <CardStyled cardInfo={cardInfoRecovered}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\nimport {fetchData, fetchDailyGlobal, fetchCountries} from './api';\nimport {CardStyled, Chart, CountryPicker, InfoSection} from './components';\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n\n  state = {\n    data:{},\n    country: ''\n  };\n  \n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData})\n  };\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  }\n\n  render(){\n    console.log(this.state)\n    return (\n      <div className={styles.container}>\n        <InfoSection data={this.state.data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={this.state}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__1vd9h\",\"chart\":\"chart_chart__SGAAJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"countryPicker_container__38AlM\",\"formControl\":\"countryPicker_formControl__3Lfuy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardStyled\":\"cardStyled_cardStyled__1SV2q\",\"Infected\":\"cardStyled_Infected__3XmwG\",\"Deaths\":\"cardStyled_Deaths__2rmth\",\"Recovered\":\"cardStyled_Recovered__3Xz5a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoSection\":\"infoSection_infoSection__19VGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2kiIg\"};"],"sourceRoot":""}